/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <vector>
#include <queue>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>



using namespace std;

struct Task {
  string name;
  int ddl;
  int reward;
  
  Task(string& n, int ddl, int r) {
      this->name = n;
      this->ddl = ddl;
      this->reward = r;
  }
};

bool cmp(Task& task1, Task& task2) {
   return task1.ddl < task2.ddl;
}
class compareReward {
    public:
    
    bool operator()(Task& task1, Task& task2){
        return task1.reward > task2.reward; 
    }
};


vector<Task> scheduleTask(vector<Task>& tasks) {
    priority_queue<Task, vector<Task>, compareReward> pq;
    sort(tasks.begin(), tasks.end(), cmp);

    int cnt = 0;
    for(int j =0; j <tasks.size(); j++) {
        if ((tasks[j].ddl+1-cnt)>0) {
           pq.push(tasks[j]);
           cnt++;
        } else {
           if (!pq.empty()) {
               Task topTask = pq.top();
               if (topTask.reward < tasks[j].reward) {
                   pq.pop();
                   pq.push(tasks[j]);
               }
           }
        }
    }
    vector<Task> res;
    while(!pq.empty()) {
       res.push_back(pq.top());
       pq.pop();
    }
    sort(res.begin(), res.end(), cmp);
    return res;
}



int main()
{
    cout<<"Hello World: ";

    vector<Task> tasks;
    string str1 = "A";
    string str2 = "B";
    string str3 = "C";
    string str4 = "D";
    Task task1 (str1, 0, 5);
    Task task2 (str2, 3, 2);
    Task task3 (str3, 3, 1);
    Task task4 (str4, 4, 1);
    tasks.push_back(task1);
    tasks.push_back(task2);
    tasks.push_back(task3);
    tasks.push_back(task4);
    
    vector<Task> res = scheduleTask(tasks);

    for (auto task :res) {
        cout << task.name << " ";
    }
    cout << "\n";
    return 0;
}
